name: Update Blog Posts
on:
  schedule:
    # Runs every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
  push:
    paths:
      - 'js/main.js'

jobs:
  update-blog-posts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install requests
        run: pip install requests
          
      - name: Fetch RSS and create JSON
        run: |
          python -c "
          import requests
          import json
          import xml.etree.ElementTree as ET
          from datetime import datetime
          
          try:
              # Fetch RSS feed
              rss_url = 'https://blog.nandan.dev/rss.xml'
              response = requests.get(rss_url)
              response.raise_for_status()
              
              # Parse XML
              root = ET.fromstring(response.content)
              
              # Extract blog posts (first 5)
              posts = []
              for item in root.findall('.//item')[:5]:
                  title = item.find('title')
                  link = item.find('link')
                  description = item.find('description')
                  pub_date = item.find('pubDate')
                  
                  # Extract image from description if available
                  image_url = 'images/system-design.png'  # default
                  if description is not None and description.text:
                      import re
                      img_match = re.search(r'<img[^>]+src=\"([^\"]+)\"', description.text)
                      if img_match:
                          image_url = img_match.group(1)
                  
                  # Format date
                  formatted_date = ''
                  if pub_date is not None and pub_date.text:
                      try:
                          date_obj = datetime.strptime(pub_date.text, '%a, %d %b %Y %H:%M:%S %z')
                          formatted_date = date_obj.strftime('%b. %d %Y')
                      except:
                          formatted_date = pub_date.text
                  
                  # Clean description
                  clean_description = ''
                  if description is not None and description.text:
                      import re
                      clean_description = re.sub(r'<[^>]*>', '', description.text)
                      clean_description = clean_description[:150] + '...' if len(clean_description) > 150 else clean_description
                  
                  post = {
                      'title': title.text if title is not None else '',
                      'link': link.text if link is not None else '',
                      'description': clean_description,
                      'date': formatted_date,
                      'image': image_url
                  }
                  posts.append(post)
              
              # Create JSON file
              with open('blog-posts.json', 'w') as f:
                  json.dump(posts, f, indent=2)
                  
              print(f'Successfully fetched {len(posts)} blog posts')
              
          except Exception as e:
              print(f'Error fetching RSS: {e}')
              # Create fallback JSON
              fallback_posts = [
                  {
                      'title': 'How I \"Hacked\" an Airline Website to get back my luggage',
                      'link': 'https://blog.nandan.dev/how-i-hacked-an-airline-website-to-get-back-my-luggage-a-first-person-insight-to-the-story',
                      'description': 'Around 3 months back, I tweeted a thread to a famous airline in India, pointing out some flaws in their data security...',
                      'date': 'Aug. 23rd 2022',
                      'image': 'images/how-I-hacked.png'
                  },
                  {
                      'title': 'System Design Series',
                      'link': 'https://blog.nandan.dev/series/system-design',
                      'description': 'Hey There, I have started learning system design and In this series, I will share my learning about system design with you. One topic at a time. Stay Tuned & Keep Learning..!! OSI,TCP/IP,Load balancers etc.',
                      'date': 'Oct. 12rd 2022',
                      'image': 'images/system-design.png'
                  }
              ]
              with open('blog-posts.json', 'w') as f:
                  json.dump(fallback_posts, f, indent=2)
              print('Created fallback blog posts JSON')
          "
          
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add blog-posts.json
          git commit -m "Update blog posts from RSS feed" || echo "No changes to commit"
          git push 